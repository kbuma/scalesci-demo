The core classes, functions, and methods that will be necessary are:

1. `LatLonData`: A dataclass to store the latitude and longitude data.
2. `FilterData`: A dataclass to store the filtering parameters.
3. `EKEData`: A dataclass to store the EKE data.
4. `WRFData`: A dataclass to store the WRF data.
5. `WRFProcessor`: A class to perform the computation and generate the plot.

Now, let's proceed with the implementation of the code.

**lat_lon.py**

```python
from dataclasses import dataclass
import numpy as np

@dataclass
class LatLonData:
    lat: np.ndarray
    lon: np.ndarray
    lat_index_north: int
    lat_index_south: int
    lon_index_west: int
    lon_index_east:
```

**filter.py**

```python
from dataclasses import dataclass

@dataclass
class FilterData:
    order: int
    fs: float
    big_period_day: float
    small_period_day: float
    low_frequency: float
    high_frequency: float
```

**eke.py**

```python
from dataclasses import dataclass
import numpy as np

@dataclass
class EKEData:
    eke_list: list[np.ndarray]
    total_eke_list: list[float]
    total_eke_avg: float
    eke_avg: np.ndarray
```

**wrf.py**

```python
from dataclasses import dataclass
import xarray as xr

@dataclass
class WRFData:
    u_data: xr.Dataset
    v_data: xr.Dataset
    u_4d_full: xr.DataArray
    v_4d_full: xr.DataArray
    u_4d: xr.DataArray
    v_4d: xr.DataArray
    lat_index_south: int
    lat_index_north: int
    lon_index_west: int
    lon_index_east:
```

**wrf_processor.py**

```python
from netCDF4 import Dataset
import numpy as np
import xarray as xr
import wrf as wrf
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
from matplotlib import rcParams
import matplotlib.patches as mpatches
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
from scipy import signal
import scipy.ndimage as ndimage
import dask.array as da
from dask.distributed import Client, LocalCluster
from lat_lon import LatLonData
from filter import FilterData
from eke import EKEData
from wrf import WRFData

class WRFProcessor:
    def __init__(self, lat_lon_data: LatLonData, filter_data: FilterData):
        self.lat_lon_data = lat_lon_data
        self.filter_data = filter_data

    def butter_bandpass_filter(self, variable):
        print("Temporal filter...")
        b, a = signal.butter(self.filter_data.order, [self.filter_data.low_frequency, self.filter_data.high_frequency], btype='bandpass')
        filtered_variable = signal.lfilter(b, a, variable, axis=0)
        return filtered_variable

    def plot_eke(self, lat, eke_avg):
        fig, ax = plt.subplots()
        clevels = np.linspace(-8, 8, 33)
        cmap = plt.cm.PuOr
        units = '$\mathrm{m}^{2}$ $\mathrm{s}^{-2}$'
        p_levels = np.linspace(1000, 100, 19)
        X, Y = np.meshgrid(lat[:, 0], p_levels)
        plt.xlabel("Latitude")
        plt.ylabel("Pressure (hPa)")
        contours_fill = plt.contourf(X, Y, eke_avg, cmap=cmap, levels=clevels, extend="both")
        ax.set_xlim(-5, 25)
        plt.minorticks_on()
        plt.gca().invert_yaxis()
        cbar = plt.colorbar(contours_fill, shrink=.58, orientation='horizontal')
        ax.set_aspect(1. / ax.get_data_ratio())
        fig.savefig('WRF_TCM_M-O_2001-2010avg_' + scenario_type + '_EKE.pdf', bbox_inches='tight')

    def process_wrf_data(self, wrf_data: WRFData) -> EKEData:
        lat = wrf_data.lat
        lon = wrf_data.lon
        lat_index_north = wrf_data.lat_index_north
        lat_index_south = wrf_data.lat_index_south
        lon_index_west = wrf_data.lon_index_west
        lon_index_east = wrf_data.lon_index_east

        eke_list = []
        total_eke_list = []

        for year in range(2001, 2011):
            print('Year =', year)
            file_location = '/global/cscratch1/sd/ebercosh/WRF_TCM/' + scenario_type + '/' + str(year) + '/'

            u_data = xr.open_dataset(file_location + 'ua_' + scenario_type + '_' + str(year) + '.nc')
            v_data = xr.open_dataset(file_location + 'va_' + scenario_type + '_' + str(year) + '.nc')
            u_4d_full = u_data.ua
            v_4d_full = v_data.va
            u_4d = u_4d_full[:-120, :, :, :]
            v_4d = v_4d_full[:-120, :, :, :]

            u_temp_filt = self.butter_bandpass_filter(u_4d)
            v_temp_filt = self.butter_bandpass_filter(v_4d)

            uu = np.square(u_temp_filt)
            vv = np.square(v_temp_filt)

            uu_3d = np.mean(uu, axis=0)
            vv_3d = np.mean(vv, axis=0)

            uu_vv_3d = uu_3d + vv_3d

            uu_vv_2d = np.mean(uu_vv_3d[:, :, lon_index_west:lon_index_east + 1], axis=2)

            eke_2d = 0.5 * uu_vv_2d
            eke_list.append(eke_2d)

            eke_1d = 0.5 * np.mean(uu_vv_2d[:, lat_index_south:lat_index_north + 1] / g, axis=1)

            total_eke = np.trapz(eke_1d, dx=5000., axis=0)
            total_eke_list.append(total_eke)

        total_eke_avg = np.mean(total_eke_list, axis=0)
        eke_avg = np.mean(eke_list, axis=0)

        return EKEData(eke_list=eke_list, total_eke_list=total_eke_list, total_eke_avg=total_eke_avg, eke_avg=eke_avg)
```

**main.py**

```python
from lat_lon import LatLonData
from filter import FilterData
from wrf import WRFData
from wrf_processor import WRFProcessor

def main():
    lat_lon_data = LatLonData(lat, lon, lat_index_north, lat_index_south, lon_index_west, lon_index_east)
    filter_data = FilterData(order=6, fs=1/6, big_period_day=5.0, small_period_day=3.0, low_frequency=0.008333333333333333, high_frequency=0.016666666666666666)
    wrf_data = WRFData(u_data, v_data, u_4d_full, v_4d_full, u_4d, v_4d, lat_index_south, lat_index_north, lon_index_west, lon_index_east)

    wrf_processor = WRFProcessor(lat_lon_data, filter_data)
    eke_data = wrf_processor.process_wrf_data(wrf_data)

    eke_avg = eke_data.eke_avg
    wrf_processor.plot_eke(lat, eke_avg)

if __name__ == "__main__":
    cluster = LocalCluster()
    client = Client(cluster)
    main()
```

**test_wrf_processor.py**

```python
import numpy as np
import pytest
from lat_lon import LatLonData
from filter import FilterData
from wrf import WRFData
from wrf_processor import WRFProcessor

@pytest.fixture
def lat_lon_data():
    lat = np.array([0, 1, 2, 3, 4])
    lon = np.array([0, 1, 2, 3, 4])
    lat_index_north = 4
    lat_index_south = 0
    lon_index_west = 0
    lon_index_east = 4
    return LatLonData(lat, lon, lat_index_north, lat_index_south, lon_index_west, lon_index_east)

@pytest.fixture
def filter_data():
    return FilterData(order=6, fs=1/6, big_period_day=5.0, small_period_day=3.0, low_frequency=0.008333333333333333, high_frequency=0.016666666666666666)

@pytest.fixture
def wrf_data():
    u_data = None  # Replace with appropriate data
    v_data = None  # Replace with appropriate data
    u_4d_full = None  # Replace with appropriate data
    v_4d_full = None  # Replace with appropriate data
    u_4d = None  # Replace with appropriate data
    v_4d = None  # Replace with appropriate data
    lat_index_south = 0
    lat_index_north = 4
    lon_index_west = 0
    lon_index_east = 4
    return WRFData(u_data, v_data, u_4d_full, v_4d_full, u_4d, v_4d, lat_index_south, lat_index_north, lon_index_west, lon_index_east)

def test_butter_bandpass_filter(wrf_data, filter_data):
    wrf_processor = WRFProcessor(None, filter_data)
    filtered_variable = wrf_processor.butter_bandpass_filter(wrf_data.u_4d)
    assert filtered_variable.shape == wrf_data.u_4d.shape

def test_process_wrf_data(wrf_data, lat_lon_data, filter_data):
    wrf_processor = WRFProcessor(lat_lon_data, filter_data)
    eke_data = wrf_processor.process_wrf_data(wrf_data)
    assert len(eke_data.eke_list) == 10
    assert len(eke_data.total_eke_list) == 10
    assert eke_data.total_eke_avg.shape == ()
    assert eke_data.eke_avg.shape == (5, 5)
```

**requirements.txt**

```
pytest
numpy
xarray
matplotlib
scipy
dask
netCDF4
```