Based on the requirements, here are the core classes, functions, and methods that will be necessary for the Tic Tac Toe game:

1. Game:
   - `start_game()`: Starts the game and manages the game flow.
   - `display_board()`: Displays the current state of the game board.
   - `get_user_move()`: Prompts the user for their move and validates it.
   - `get_computer_move()`: Generates the computer's move.
   - `make_move(player, position)`: Updates the game board with the player's move.
   - `check_winner()`: Checks if there is a winner.
   - `check_tie()`: Checks if the game is a tie.
   - `play_again()`: Asks the user if they want to play again.

2. Board:
   - `__init__(self)`: Initializes the game board.
   - `is_position_empty(self, position)`: Checks if a position on the board is empty.
   - `is_board_full(self)`: Checks if the board is full.
   - `make_move(self, player, position)`: Updates the board with the player's move.
   - `is_winner(self, player)`: Checks if the player has won.

3. Player:
   - `__init__(self, name, symbol)`: Initializes a player with a name and symbol.
   - `get_name(self)`: Returns the name of the player.
   - `get_symbol(self)`: Returns the symbol of the player.

Now, let's proceed with creating the necessary files and implementing the code.

**game.py**
```python
from board import Board
from player import Player

class Game:
    def __init__(self):
        self.board = Board()
        self.player = Player("Player", "X")
        self.computer = Player("Computer", "O")

    def start_game(self):
        print("Welcome to Tic Tac Toe!")
        self.board.clear_board()
        self.display_board()

        while True:
            self.get_user_move()
            if self.check_winner() or self.check_tie():
                break

            self.get_computer_move()
            if self.check_winner() or self.check_tie():
                break

        self.play_again()

    def display_board(self):
        print("Current Board:")
        self.board.display()

    def get_user_move(self):
        while True:
            position = input("Enter your move (1-9): ")
            if position.isdigit() and 1 <= int(position) <= 9:
                position = int(position)
                if self.board.is_position_empty(position):
                    self.make_move(self.player, position)
                    break
                else:
                    print("That position is already taken. Try again.")
            else:
                print("Invalid input. Try again.")

    def get_computer_move(self):
        position = self.board.get_random_empty_position()
        self.make_move(self.computer, position)

    def make_move(self, player, position):
        self.board.make_move(player, position)
        self.display_board()

    def check_winner(self):
        if self.board.is_winner(self.player):
            print(f"{self.player.get_name()} wins!")
            return True
        elif self.board.is_winner(self.computer):
            print(f"{self.computer.get_name()} wins!")
            return True
        return False

    def check_tie(self):
        if self.board.is_board_full():
            print("It's a tie!")
            return True
        return False

    def play_again(self):
        while True:
            choice = input("Do you want to play again? (y/n): ")
            if choice.lower() == "y":
                self.start_game()
                break
            elif choice.lower() == "n":
                print("Thank you for playing Tic Tac Toe!")
                break
            else:
                print("Invalid input. Try again.")

if __name__ == "__main__":
    game = Game()
    game.start_game()
```

**board.py**
```python
import random

class Board:
    def __init__(self):
        self.board = [" " for _ in range(9)]

    def clear_board(self):
        self.board = [" " for _ in range(9)]

    def display(self):
        print(f" {self.board[0]} | {self.board[1]} | {self.board[2]} ")
        print("---+---+---")
        print(f" {self.board[3]} | {self.board[4]} | {self.board[5]} ")
        print("---+---+---")
        print(f" {self.board[6]} | {self.board[7]} | {self.board[8]} ")

    def is_position_empty(self, position):
        return self.board[position - 1] == " "

    def is_board_full(self):
        return " " not in self.board

    def make_move(self, player, position):
        self.board[position - 1] = player.get_symbol()

    def is_winner(self, player):
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]  # Diagonals
        ]

        for combination in winning_combinations:
            if all(self.board[pos] == player.get_symbol() for pos in combination):
                return True
        return False

    def get_random_empty_position(self):
        empty_positions = [pos + 1 for pos, value in enumerate(self.board) if value == " "]
        return random.choice(empty_positions)
```

**player.py**
```python
class Player:
    def __init__(self, name, symbol):
        self.name = name
        self.symbol = symbol

    def get_name(self):
        return self.name

    def get_symbol(self):
        return self.symbol
```

This is the complete implementation of the Tic Tac Toe game in Python. The game can be run by executing the `game.py` file.